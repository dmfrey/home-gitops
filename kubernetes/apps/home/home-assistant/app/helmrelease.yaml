---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app home-assistant

spec:

  interval: 10m

  chart:
    spec:
      chart: app-template
      version: 3.3.2
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          git-sync:
            restartPolicy: Always

            image:
              repository: registry.k8s.io/git-sync/git-sync
              tag: v4.2.4@sha256:8bfbf28623690fba06c65ec392e42023d28ecfc7e0fbfd4443388d020dc112ea

            env:
              GITSYNC_REPO: https://github.com/dmfrey/hass-config  # git@github.com:dmfrey/hass-config.git
              GITSYNC_REF: main
              GITSYNC_PERIOD: 10s # 1 day
              GITSYNC_ROOT: /config
              GITSYNC_ADD_USER: ${UID}
              GITSYNC_VERBOSE: 2
              # GIT_SYNC_ONE_TIME: "true"

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi

            securityContext:
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: false
              capabilities: { drop: ["ALL"] }

          # fix-permissions:
          #   dependsOn: git-sync
          #   image:
          #     repository: busybox
          #     tag: stable

          #   command: ["sh", "-c", "chown -R 568:568 /config"]

          #   securityContext:
          #     runAsNonRoot: false
          #     readOnlyRootFilesystem: true
          #     allowPrivilegeEscalation: true
          #     runAsUser: 0
          #     runAsGroup: 0
          #     capabilities: { add: ["CHOWN", "FOWNER", "DAC_OVERRIDE"], drop: ["ALL"] }

        containers:
          *app :
            image:
              repository: ghcr.io/onedr0p/home-assistant
              tag: 2024.7.4@sha256:3db687091769f145839c0a690143c1a63dbb646fd69711684103b575f070b598

            env:
              TZ: ${TIMEZONE}
              HASS_RECORDER_DB_URL:
                valueFrom:
                  secretKeyRef:
                    name: pg-home-assistant-app
                    key: uri

            envFrom:
              - secretRef:
                  name: home-assistant-secret
                prefix: "HASS_"

            ports:
              - name: http
                containerPort: &port 8123

            probes:
              liveness:
                custom: true
                spec:
                  httpGet:
                    path: /manifest.json
                    port: *port
                  initialDelaySeconds: 3
                  periodSeconds: 3
              readiness:
                enabled: false
              startup:
                enabled: false

            resources:
              requests:
                # squat.ai/slzb06m: 1
                # squat.ai/skyconnect: 1
                cpu: 47m
                memory: 2048Mi
              limits:
                # squat.ai/slzb06m: 1
                # squat.ai/skyconnect: 1
                memory: 4096Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

          # home-assistant-addon-otbr:
          #   dependsOn: *app

          #   image:
          #     repository: homeassistant/amd64-addon-otbr
          #     tag: 2.9.0

          #   env:
          #     TZ: "${TIMEZONE}"

          #   ports:
          #     - name: otbrweb
          #       containerPort: &otbrWebPort 8080
          #     - name: otbrrest
          #       containerPort: &otbrRestPort 8081

          #   securityContext:
          #     runAsNonRoot: false
          #     runAsUser: 0
          #     runAsGroup: 0

          codeserver:
            dependsOn: *app

            image:
              repository: ghcr.io/coder/code-server
              tag: 4.91.1

            args:
              - "/config"
              - --auth
              - "none"
              - --user-data-dir
              - "/config/.vscode"
              - --extensions-dir
              - "/config/.vscode"
              - --port
              - "8082"

            env:
              TZ: ${TIMEZONE}

            ports:
              - name: code
                containerPort: &codePort 8082

        pod:
          annotations:
            k8s.v1.cni.cncf.io/networks: |
              [{
                "name":"iot-vlan",
                "namespace": "network",
                "ips": ["192.168.50.4/24"],
                "mac": "a6:60:f7:86:74:12",
                "gateway": ["192.168.50.1"]
              }]

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
        supplementalGroups:
          - 20    # dialout
          - 85    # usb

    service:
      *app :
        controller: *app
        type: LoadBalancer
        annotations:
          external-dns.alpha.kubernetes.io/hostname: home.${SECRET_DOMAIN}
          io.cilium/lb-ipam-ips: ${SVC_HASS_ADDR}
        ports:
          http:
            port: *port
          code:
            port: *codePort
          # otbrweb:
          #   port: *otbrWebPort
          # otbrrest:
          #   port: *otbrRestPort

    ingress:
      external:
        className: external
        annotations:
          nginx.org/websocket-services: home-assistant
          cert-manager.io/cluster-issuer: letsencrypt-prod
          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:homeassistant"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        hosts:
          - host: &host home.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: *app
                  port: *port
        tls:
          - hosts:
              - *host
            secretName: home-assistant-tls-external

      code-external:
        className: external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          auth.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:vs-code"
          hajimari.io/appName: "Hass Config"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        hosts:
          - host: &host-hass-code hass-code.${SECRET_DOMAIN}
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: *app
                  port: *codePort
        tls:
          - hosts:
              - *host-hass-code
            secretName: hass-code-tls-external

      # otbr-external:
      #   className: external
      #   annotations:
      #     cert-manager.io/cluster-issuer: letsencrypt-prod
      #     auth.home.arpa/enabled: "true"
      #     hajimari.io/enable: "true"
      #     # hajimari.io/icon: "mdi:vs-code"
      #     # hajimari.io/appName: "Hass Config"
      #     external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
      #   hosts:
      #     - host: &host-otbr otbr.${SECRET_DOMAIN}
      #       paths:
      #         - path: /
      #           pathType: Prefix
      #           service:
      #             identifier: *app
      #             port: *otbrWebPort
      #   tls:
      #     - hosts:
      #         - *host-otbr
      #       secretName: hass-code-tls-external

    serviceMonitor:
      *app :
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /api/prometheus
            interval: 30s
            scrapeTimeout: 10s
            bearerTokenSecret:
              name: home-assistant-secret
              key: PROMETHEUS_TOKEN

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}
        globalMounts:
          - path: /config

      deploy-key:
        type: secret
        name: home-assistant-deploy-key
        defaultMode: 256
        advancedMounts:
          *app :
            git-sync:
              - path: /etc/git-secret/ssh
                subPath: ssh-privatekey
                readOnly: true
              - path: /etc/git-secret/known_hosts
                subPath: known-hosts
            *app : &sshmounts
              - path: /root/.ssh/id_ed25519
                subPath: ssh-privatekey
                readOnly: true
              - path: /root/.ssh/known_hosts
                subPath: known-hosts
              - path: /root/.gitconfig
                subPath: dot-gitconfig
              - path: /root/.ssh/config
                subPath: ssh-config
            codeserver: *sshmounts

      configuration:
        type: configMap
        name: hass-config
        advancedMounts:
          *app :
            *app :
              - path: /config/configuration.yaml
                subPath: configuration.yaml

      backups:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: "${QNAP_ADDR}"
            path: /homeassistant
        advancedMounts:
          *app :
            *app :
              - path: /config/backups
                readOnly: false

      tmp:
        type: emptyDir
        advancedMounts:
          *app :
            git-sync:
              - path: /tmp
            *app :
              - path: /tmp

      # usb:
      #   type: hostPath
      #   hostPath: /dev/ttyUSB0
      #   advancedMounts:
      #     *app :
      #       *app :
      #         - path: /dev/ttyUSB0


