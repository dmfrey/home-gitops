---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitor
spec:
  
  interval: 30m
  
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 58.3.3
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  
  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 5

  uninstall:
    keepHistory: false
  
  valuesFrom:
    - kind: ConfigMap
      name: flux-kube-state-metrics-config
      valuesKey: kube-state-metrics-config.yaml

  values:
  
    cleanPrometheusOperatorObjectNames: true

    alertmanager:
      config:
        global:
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "pushover"
            pushover_configs:
              - html: true
                token: "${SECRET_ALERTMANAGER_PUSHOVER_TOKEN}"
                user_key: "${SECRET_ALERTMANAGER_PUSHOVER_USER_KEY}"
                sound: gamelan
                send_resolved: true
                priority: |-
                  {{ if eq .Status "firing" }}1{{ else }}0{{ end }}
                url_title: View in Alert Manager
                title: |-
                  [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .CommonLabels.alertname }}
                message: |-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      <b>Severity:</b> <i>{{ .Labels.severity }}</i>
                    {{- else }}
                      <b>Severity:</b> <i>N/A</i>
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      <b>Description:</b> <i>{{ .Annotations.description }}</i>
                    {{- else if ne .Annotations.summary "" }}
                      <b>Summary:</b> <i>{{ .Annotations.summary }}</i>
                    {{- else if ne .Annotations.message "" }}
                      <b>Message:</b> <i>{{ .Annotations.message }}</i>
                    {{- else }}
                      <b>Description:</b> <i>N/A</i>
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      <b>Details:</b>
                      {{- range .Labels.SortedPairs }}
                        â€¢ <b>{{ .Name }}:</b> <i>{{ .Value }}</i>
                      {{- end }}
                    {{- end }}
                  {{- end }}

        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "pushover"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "pushover"
              matchers:
                - severity = "critical"
              continue: true

        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]

      ingress:
        enabled: false
      #   pathType: Prefix
      #   ingressClassName: external
      #   annotations:
      #     cert-manager.io/cluster-issuer: letsencrypt-prod
      #     auth.home.arpa/enabled: "true"
      #     hajimari.io/enable: "true"
      #     hajimari.io/icon: "mdi:alert-decagram-outline"
      #     hajimari.io/appName: "Alert Manager"
      #     external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
      #   hosts:
      #     - &host alert-manager.${SECRET_DOMAIN}
      #   tls:
      #     - hosts:
      #         - *host
      #       secretName: alert-manager-tls-external

      alertmanagerSpec:
        replicas: 3
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi              
    
    # kube-state-metrics:
    #   metricLabelsAllowlist:
    #     - "pods=[*]"
    #     - "deployments=[*]"
    #     - "statefulsets=[*]"
    #     - "persistentvolumeclaims=[*]"
    #   prometheus:
    #     monitor:
    #       enabled: true
    #       relabelings:
    #         - action: replace
    #           regex: (.*)
    #           replacement: $1
    #           sourceLabels: ["__meta_kubernetes_pod_node_name"]
    #           targetLabel: kubernetes_node

    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true

    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance

    kubeApiServer:
      enabled: true

    kubeControllerManager:
      enabled: true
      endpoints: &endpoints
        - 192.168.30.31
        - 192.168.30.32
        - 192.168.30.33

    kubeScheduler:
      enabled: true
      endpoints: *endpoints

    kubeProxy:
      enabled: true # Disabled because eBPF
      endpoints: *endpoints

    kubeEtcd:
      enabled: true
      endpoints: *endpoints
      service:
        enabled: true
        port: 2381
        targetPort: 2381

    prometheus:
      ingress:
        enabled: true
        ingressClassName: external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          auth.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:prometheus"
          hajimari.io/appName: "Prometheus"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        pathType: Prefix
        hosts:
          - &host prometheus.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host
            secretName: prometheus-tls-external

      thanosService:
        enabled: true

      thanosServiceMonitor:
        enabled: true

      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: __replica__
        externalLabels:
          cluster: ${CLUSTER_NAME}

        thanos:
          image: quay.io/thanos/thanos:v0.34.1@sha256:567346c3f6ff2927c2c6c0daad977b2213f62d45eca54d48afd19e6deb902181
          objectStorageConfig:
            name: thanos-secret
            key: objstore.yml
          # renovate: datasource=docker depName=quay.io/thanos/thanos
          version: "v0.32.4"

        alertingEnpoints:
          - namespace: monitor
            name: alertmanager
            port: 9093
            apiVersion: v2

        podAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 14d
        retentionSize: 45GB
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 50Gi

        resources:
          requests:
            cpu: 10m
            memory: 2000Mi
          limits:
            memory: 8000Mi

        additionalScrapeConfigs:
          
          - job_name: node-exporter
            scrape_interval: 1m
            scrape_timeout: 10s
            honor_timestamps: true
            static_configs:
              - targets:
                  - ${QNAP_ADDR}:9100
          
          - job_name: minio
            metrics_path: /minio/v2/metrics/cluster
            static_configs:
              - targets: ["${QNAP_ADDR}:9000"]

      prometheusConfigReloader:
        # resource config for prometheusConfigReloader
        resources:
          requests:
            cpu: 5m
            memory: 32M
          limits:
            memory: 32M

  postRenderers:
    - kustomize:
        patches:
          - target:
              version: v1
              kind: ConfigMap
              labelSelector: grafana.io/dashboard in (true)
            patch: |-
              apiVersion: v1
              kind: ConfigMap
              metadata:
                name: not-used
                namespace: not-used
                annotations:
                  grafana.io/folder: Kubernetes
