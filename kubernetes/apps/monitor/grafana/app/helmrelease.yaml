---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana
  namespace: monitor
spec:
  interval: 15m
  chart:
    spec:
      chart: grafana
      version: 8.5.10
      sourceRef:
        kind: HelmRepository
        name: grafana
        namespace: flux-system
  values:
    replicas: 1

    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
          - name: default
            disableDeletion: false
            editable: true
            folder: ""
            options:
              path: /var/lib/grafana/dashboards/default
            orgId: 1
            type: file
          - name: device
            disableDeletion: false
            editable: true
            folder: "Device"
            options:
              path: /var/lib/grafana/dashboards/device
            orgId: 1
            type: file
          - name: flux
            disableDeletion: false
            editable: true
            folder: "Flux"
            options:
              path: /var/lib/grafana/dashboards/flux
            orgId: 1
            type: file
          - name: kubernetes
            disableDeletion: false
            editable: true
            folder: "Kubernetes"
            options:
              path: /var/lib/grafana/dashboards/kubernetes
            orgId: 1
            type: file
          - name: media
            disableDeletion: false
            editable: true
            folder: "Media"
            options:
              path: /var/lib/grafana/dashboards/media
            orgId: 1
            type: file
          - name: network
            disableDeletion: false
            editable: true
            folder: "Network"
            options:
              path: /var/lib/grafana/dashboards/network
            orgId: 1
            type: file
          - name: policy
            disableDeletion: false
            editable: true
            folder: "Policy"
            options:
              path: /var/lib/grafana/dashboards/policy
            orgId: 1
            type: file
          - name: security
            disableDeletion: false
            editable: true
            folder: "Security"
            options:
              path: /var/lib/grafana/dashboards/security
            orgId: 1
            type: file
          - name: storage
            disableDeletion: false
            editable: true
            folder: "Storage"
            options:
              path: /var/lib/grafana/dashboards/storage
            orgId: 1
            type: file
          - name: spring-boot
            disableDeletion: false
            editable: true
            folder: "Spring Boot"
            options:
              path: /var/lib/grafana/dashboards/spring-boot
            orgId: 1
            type: file
          - name: spring-cloud-dataflow
            disableDeletion: false
            editable: true
            folder: "Spring Cloud Data Flow"
            options:
              path: /var/lib/grafana/dashboards/spring-cloud-dataflow
            orgId: 1
            type: file
          - name: spring-cloud-gateway
            disableDeletion: false
            editable: true
            folder: "Spring Cloud Gateway"
            options:
              path: /var/lib/grafana/dashboards/spring-cloud-gateway
            orgId: 1
            type: file
          - name: apm
            disableDeletion: false
            editable: true
            folder: "Application Performance"
            options:
              path: /var/lib/grafana/dashboards/apm
            orgId: 1
            type: file
          - name: datastore
            orgId: 1
            folder: Datastore
            type: file
            disableDeletion: false
            editable: true
            options:
              path: /var/lib/grafana/dashboards/datastore-folder

    dashboards:

      datastore:

        dragonfly:
          url: https://raw.githubusercontent.com/dragonflydb/dragonfly/main/tools/local/monitoring/grafana/provisioning/dashboards/dashboard.json
          datasource: prometheus

        emqx-authentication:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/authentication.json
          datasource: prometheus
        emqx-authorization:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/authorization.json
          datasource: prometheus
        emqx-client-events:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/client-events.json
          datasource: prometheus
        emqx-messages:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/messages.json
          datasource: prometheus
        emqx-overview:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/overview.json
          datasource: prometheus
        emqx-rule-engine-count:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/rule-engine-count.json
          datasource: prometheus
        emqx-rule-engine-rate:
          url: https://raw.githubusercontent.com/emqx/emqx-exporter/main/grafana-dashboard/template/emqx-5/rule-engine-rate.json
          datasource: prometheus

      device:

        # Ref: https://grafana.com/grafana/dashboards/1860-node-exporter-full/
        # renovate: depName="Node Exporter Full"
        node-exporter:
          gnetId: 1860
          revision: 37
          datasource: prometheus

        node-feature-discovery:
          url: https://raw.githubusercontent.com/kubernetes-sigs/node-feature-discovery/master/examples/grafana-dashboard.json
          datasource: prometheus

      flux:
        flux-cluster:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/cluster.json
          datasource: prometheus
        flux-control-plane:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/control-plane.json
          datasource: prometheus
        flux-logs:
          url: https://raw.githubusercontent.com/fluxcd/flux2-monitoring-example/main/monitoring/configs/dashboards/logs.json
          datasource: prometheus

      kubernetes:
        kubernetes-api-server:
          # renovate: depName="Kubernetes / System / API Server"
          gnetId: 15761
          revision: 18
          datasource: prometheus
        kubernetes-coredns:
          # renovate: depName="Kubernetes / System / CoreDNS"
          gnetId: 15762
          revision: 18
          datasource: prometheus
        kubernetes-global:
          # renovate: depName="Kubernetes / Views / Global"
          gnetId: 15757
          revision: 42
          datasource: prometheus
        kubernetes-namespaces:
          # renovate: depName="Kubernetes / Views / Namespaces"
          gnetId: 15758
          revision: 39
          datasource: prometheus
        kubernetes-nodes:
          # renovate: depName="Kubernetes / Views / Nodes"
          gnetId: 15759
          revision: 32
          datasource: prometheus
        kubernetes-pods:
          # renovate: depName="Kubernetes / Views / Pods"
          gnetId: 15760
          revision: 32
          datasource: prometheus
        kubernetes-volumes:
          # renovate: depName="K8s / Storage / Volumes / Cluster"
          gnetId: 11454
          revision: 14
          datasource: prometheus

      media:
        servarr-dashboard:
          # renovate: depName="Media Dashboard"
          url: https://raw.githubusercontent.com/onedr0p/exportarr/refs/heads/master/examples/grafana/dashboard2.json
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        overseerr-dashboard:
          # renovate: depName="Overseerr"
          url: https://raw.githubusercontent.com/WillFantom/overseerr-exporter/main/grafana/dashboard.json
          datasource: prometheus

      network:

        # Ref: https://grafana.com/grafana/dashboards/13768-blocky
        # renovate: depName="blocky"
        blocky:
          gnetId: 13768
          revision: 4
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        # Ref: https://grafana.com/grafana/dashboards/17996-blocky-postgres
        # renovate: depName="Blocky Query"
        blocky-postgres:
          gnetId: 17996
          revision: 11
          datasource:
            - name: "DS_BLOCKYDB"
              value: blocky-pgcluster

        cloudflared:
          # renovate: depName="Cloudflare Tunnels (cloudflared)"
          gnetId: 17457
          revision: 6
          datasource:
            - name: DS_PROMETHEUS
              value: prometheus

        # Ref: https://grafana.com/grafana/dashboards/11315
        clients:
          gnetId: 11315
          revision: 9
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        # Ref: https://grafana.com/grafana/dashboards/11312
        usw:
          gnetId: 11312
          revision: 9
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        # Ref: https://grafana.com/grafana/dashboards/11314
        uap:
          gnetId: 11314
          revision: 10
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        # Ref: https://grafana.com/grafana/dashboards/11314
        sites:
          gnetId: 11311
          revision: 5
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        # Ref: https://grafana.com/grafana/dashboards/11314
        usg:
          gnetId: 11313
          revision: 9
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        # Ref: https://grafana.com/grafana/dashboards/11314
        dpi:
          gnetId: 11310
          revision: 5
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus
        security:
          # Ref: https://grafana.com/grafana/dashboards/14837
          authentik:
            gnetId: 14837
            revision: 2
            datasource:
              - name: "DS_PROMETHEUS"
                value: prometheus

      policy:

        # Ref: https://grafana.com/grafana/dashboards/15804-kyverno
        # renovate: depName="Keyverno"
        keyverno:
          gnetId: 15804
          revision: 4
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus

      security:

        # Ref: https://grafana.com/grafana/dashboards/11001-cert-manager
        # renovate: depName="cert-manager"
        keyverno:
          gnetId: 11001
          revision: 1
          datasource: prometheus

      storage:

        # Ref: https://grafana.com/grafana/dashboards/2842/
        # renovate: depName="Ceph Cluster"
        ceph-cluster:
          gnetId: 2842
          revision: 18
          datasource: prometheus
        # Ref: https://grafana.com/grafana/dashboards/5336/
        # renovate: depName="Ceph OSD"
        ceph-osds:
          gnetId: 5336
          revision: 9
          datasource: prometheus
        # Ref: https://grafana.com/grafana/dashboards/5342/
        # renovate: depName="Ceph Pools"
        ceph-pools:
          gnetId: 5342
          revision: 9
          datasource: prometheus

        volsync:
          # renovate: depName="VolSync Dashboard"
          gnetId: 21356
          revision: 3
          datasource:
            - { name: DS_PROMETHEUS, value: prometheus }
            - { name: VAR_REPLICATIONDESTNAME, value: .*-bootstrap }

      spring-boot:
        spring-boot-3:
          # renovate: depName="Spring Boot 3.x Statistics"
          gnetId: 19004
          revision: 1
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus

      spring-cloud-dataflow:
        scdf-applications:
          # renovate: depName="SCDF | Applications"
          url: https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/refs/heads/main/src/grafana/prometheus/docker/grafana/dashboards/scdf-applications.json
          datasource: prometheus

        scdf-kafka-streams:
          # renovate: depName="SCDF | Kafka Streams"
          url: https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/refs/heads/main/src/grafana/prometheus/docker/grafana/dashboards/scdf-kafka-streams.json
          datasource: prometheus

        scdf-servers:
          # renovate: depName="SCDF | Servers"
          url: https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/refs/heads/main/src/grafana/prometheus/docker/grafana/dashboards/scdf-servers.json
          datasource: prometheus

        scdf-streams:
          # renovate: depName="SCDF | Streams"
          url: https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/refs/heads/main/src/grafana/prometheus/docker/grafana/dashboards/scdf-streams.json
          datasource: prometheus

        # renovate: depName="SCDF | Tasks / Batch"
        scdf-task-batch:
          url: https://raw.githubusercontent.com/spring-cloud/spring-cloud-dataflow/refs/heads/main/src/grafana/prometheus/docker/grafana/dashboards/scdf-task-batch.json
          datasource: prometheus

        scdf-prometheus-proxy:
          url: https://raw.githubusercontent.com/dmfrey/prometheus-rsocket-proxy/refs/heads/main/scripts/grafana-dashboard.json
          datasource: prometheus

      spring-cloud-gateway:
        # renovate: depName="Spring Cloud Gateway"
        spring-cloud-gateway:
          gnetId: 11506
          revision: 1
          datasource: prometheus

      apm:
        # Ref: https://grafana.com/grafana/dashboards/19419-opentelemetry-apm/
        apm:
          gnetId: 19419
          revision: 4
          datasource:
            - name: "DS_PROMETHEUS"
              value: prometheus

        prometheus:
          # renovate: depName="Prometheus"
          gnetId: 19105
          revision: 5
          datasource: prometheus

    deploymentStrategy:
      type: Recreate

    env:
      GF_DATE_FORMATS_USE_BROWSER_LOCALE: true
      GF_EXPLORE_ENABLED: true
      GF_LOG_FILTERS: rendering:debug
      GF_PANELS_DISABLE_SANITIZE_HTML: true
      GF_SECURITY_COOKIE_SAMESITE: grafana

    envFromSecrets:
      - name: grafana-secret

    extraSecretMounts:
      - name: pg-grafana-app-secret
        mountPath: /etc/secrets/db
        secretName: pg-grafana-app
        defaultMode: 0444
        readOnly: true
      - name: pg-blocky-app-secret
        mountPath: /etc/secrets/blocky
        secretName: pg-blocky-app
        defaultMode: 0444
        readOnly: true

    grafana.ini:
      analytics:
        check_for_updates: false
      auth:
        oauth_auto_login: true
      auth.generic_oauth:
        enabled: true
        name: Authentik
        icon: signin
        scopes: openid profile email
        empty_scopes: false
        use_pkce: true
      auth.generic_oauth.group_mapping:
        org_id: 1
        role_attribute_path: |
          contains(groups[*], 'Grafana Admins') && 'Admin' || contains(groups[*], 'Grafana Editors') && 'Editor' || 'Viewer'
      auth.basic:
        # enabled: false
        enabled: true
      auth.anonymous:
        enabled: false
      database:
        type: postgres
        host: $__file{/etc/secrets/db/host}:$__file{/etc/secrets/db/port}
        name: $__file{/etc/secrets/db/dbname}
        user: $__file{/etc/secrets/db/username}
        password: $__file{/etc/secrets/db/password}
      paths:
        data: /var/lib/grafana/data
      server:
        root_url: https://grafana.${SECRET_DOMAIN}

    imageRenderer:
      enabled: true
      serviceMonitor:
        enabled: true

    ingress:
      enabled: true
      ingressClassName: external
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        hajimari.io/enable: "true"
        hajimari.io/icon: "simple-icons:grafana"
        external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
      hosts:
        - &host grafana.${SECRET_DOMAIN}
        - monitor.${SECRET_DOMAIN}
      tls:
        - hosts:
            - *host
            - monitor.${SECRET_DOMAIN}
          secretName: grafana-tls-external

    persistence:
      enabled: true
      type: pvc
      finalizers:
        - kubernetes.io/pvc-protection
      existingClaim: grafana

    plugins:
      - grafana-clock-panel
      - grafana-piechart-panel
      - grafana-worldmap-panel
      - natel-discrete-panel
      - pr0ps-trackmap-panel
      - vonage-status-panel
      - isovalent-hubble-datasource

    podAnnotations:
      configmap.reloader.stakater.com/reload: grafana
      secret.reloader.stakater.com/reload: grafana-secrets,pg-grafana-app,pg-blocky-app

    rbac:
      pspEnabled: false

    resources:
      limits:
        memory: 219Mi
      requests:
        cpu: 23m
        memory: 127Mi

    service:
      enabled: true
      type: ClusterIP
      port: 3000
      targetPort: 3000
      portName: service

    serviceMonitor:
      enabled: true

    sidecar:
      logLevel: INFO
      alerts:
        enabled: true
        label: grafana.io/alert
        labelValue: "true"
      dashboards:
        enabled: true
        label: grafana.io/dashboard
        labelValue: "true"
        folderAnnotation: "grafana.io/folder"
        searchNamespace: ALL
        provider:
          disableDelete: true
          foldersFromFilesStructure: true
      datasources:
        enabled: true
        label: grafana.io/datasource
        labelValue: "true"
        searchNamespace: ALL
      notifiers:
        enabled: true
        label: grafana.io/notifier
        labelValue: "true"
        searchNamespace: ALL
      plugins:
        enabled: true
        label: grafana.io/plugin
        labelValue: "true"
        searchNamespace: ALL

    topologySpreadConstraints:
      - maxSkew: 2
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: grafana
