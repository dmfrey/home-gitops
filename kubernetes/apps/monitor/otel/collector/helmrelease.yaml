---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: otel-collector
  namespace: monitor
spec:

  interval: 15m

  chart:
    spec:
      chart: opentelemetry-collector
      version: 0.89.0
      sourceRef:
        kind: HelmRepository
        name: opentelemetry-charts
        namespace: flux-system
  
  install:
    remediation:
      retries: 3
  
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  
  uninstall:
    keepHistory: false
 
  values:

    mode: daemonset

    annotations:
      configmap.reloader.stakater.com/reload: otel-collector-opentelemetry-collector-agent

    image:
      repository: otel/opentelemetry-collector-k8s

    presets:
      logsCollection:
        enabled: true
      kubernetesAttributes:
        enabled: true
      kubeletMetrics:
        enabled: true
      hostMetrics:
        enabled: true

    config:

      extensions:
        health_check: {}
        memory_ballast:
          size_in_percentage: 40

      processors:
        batch: {}
        memory_limiter:
          check_interval: 5s
          limit_percentage: 80
          spike_limit_percentage: 25

      receivers:
        jaeger: null
        otlp:
        zipkin: null

      exporters:

        # Data sources: traces, metrics, logs
        # file:
        #   path: ./filename.json
   
        # Data sources: traces
        # otlp/jaeger:
        #   endpoint: jaeger-server:4317
        #   tls:
        #     cert_file: cert.pem
        #     key_file: cert-key.pem

        # Data sources: traces, metrics, logs
        # kafka:
        #   protocol_version: 2.0.0

        # Data sources: traces, metrics, logs
        # NOTE: Prior to v0.86.0 use `logging` instead of `debug`
        # debug:
        #   verbosity: detailed

        # Data sources: traces, metrics
        # opencensus:
        #   endpoint: otelcol2:55678

        # Data sources: traces, metrics, logs
        otlp:
          endpoint: tempo-distributed.trace.svc.cluster.local:4317
          # tls:
          #   cert_file: cert.pem
          #   key_file: cert-key.pem

        # Data sources: traces, metrics
        otlphttp:
          endpoint: http://tempo-distributed.trace.svc.cluster.local:4318

        # Data sources: metrics
        # prometheus:
        #   endpoint: 0.0.0.0:8889
        #   namespace: default

        # Data sources: metrics
        # prometheusremotewrite:
        #   endpoint: http://prometheus.example.com:9411/api/prom/push
          # When using the official Prometheus (running via Docker)
          # endpoint: 'http://prometheus:9090/api/v1/write', add:
          # tls:
          #   insecure: true

        # Data sources: traces
        zipkin:
          endpoint: http://tempo-distributed.trace.svc.cluster.local:9411/api/v2/spans

      service:
        pipelines:
          traces:
            receivers: [ otlp ]
            processors: [ memory_limiter,batch ]
            exporters: [ otlp ]

          metrics:
            receivers: [ otlp ]
            processors: [ memory_limiter,batch,attributes/metrics ]
            exporters: [ otlp ]

          logs:
            receivers: [ otlp ]
            processors: [ memory_limiter,batch,attributes/logs ]
            exporters: [ otlp ]