# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app gatus

spec:

  interval: 30m

  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  install:
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:

    controllers:
      gatus:
        replicas: 3
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:

          init-config:

            image:
              repository: ghcr.io/kiwigrid/k8s-sidecar
              tag: 1.28.0@sha256:4166a019eeafd1f0fef4d867dc5f224f18d84ec8681dbb31f3ca258ecf07bcf2

            env:
              FOLDER: /config
              LABEL: gatus.io/enabled
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: WATCH

            restartPolicy: Always

            resources: &resources
              requests:
                cpu: 10m
              limits:
                memory: 256Mi

        containers:

          app:

            image:
              repository: ghcr.io/twin/gatus
              tag: v5.13.1@sha256:24842a8adebd3dd4bd04a4038ffa27cb2fe72bb50631415e0fb2915063fc1993

            env:
              - name: TZ
                value: ${TIMEZONE}
              - name: BASE_URL
                value: https://status.${SECRET_DOMAIN}
              - name: GATUS_CONFIG_PATH
                value: /config
              - name: GATUS_DELAY_START_SECONDS
                value: 5
              - name: POSTGRES_URI
                secretKeyRef:
                  name: pg-gatus-app
                  key: uri

            envFrom:
              - secretRef:
                  name: gatus-secret

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &port 8080
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

            resources: *resources

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        pod:
          dnsConfig:
            options:
              - { name: ndots, value: "1" }

          securityContext:
            runAsUser: 568
            runAsGroup: 568
            runAsNonRoot: true
            fsGroup: 568
            fsGroupChangePolicy: OnRootMismatch

          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: *app

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port

    serviceMonitor:
      app:
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
            metricRelabelings:
              - action: labeldrop
                regex: (pod)
              - action: replace
                sourceLabels: ["service"]
                targetLabel: instance

    ingress:
      app:
        className: external
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          hajimari.io/enable: "true"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        hosts:
          - host: &host status.${SECRET_DOMAIN}
            paths:
            - path: /
              service:
                identifier: app
                port: http
        tls:
          - hosts:
              - *host
            secretName: gatus-tls-external

    serviceAccount:
      create: true
      name: *app

    persistence:
      config:
        type: emptyDir

      config-file:
        type: configMap
        name: gatus-configmap
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true
