---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: &app overseerr
  namespace: media
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 2.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false

  values:

    controllers:
      main:
        type: statefulset
        annotations:
          reloader.stakater.com/auto: "true"

        pod:
          securityContext:
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
            fsGroupChangePolicy: OnRootMismatch

        containers:
          main:
            image:
              repository: ghcr.io/sct/overseerr
              tag: 1.33.2

            env:
              LOG_LEVEL: "info"
              PORT: &port 5055

            ports:
              - name: http
                containerPort: *port

            resources:
              requests:
                memory: 350Mi
                cpu: 5m
              limits:
                memory: 431Mi

          # sidecars:
          # exporter:
          #   dependsOn: main
          #   name: exporter
            
          #   image: 
          #     repository: ghcr.io/willfantom/overseerr-exporter
          #     tag: 1.2.1

          #   args:
          #     - --overseerr.address
          #     - "http://localhost:5055"
          #     - --overseerr.api-key
          #     - "$(OVERSEERR_API_KEY)"
            
          #   envFrom:
          #     - secretRef:
          #         name: overseerr-secret

          #   ports:
          #     - name: metrics
          #       containerPort: &metricsPort 9850

        initContainers:
          config-setup:
            image: 
              repository: ghcr.io/onedr0p/alpine
              tag: 3.19.0@sha256:51632d23e56ae28a34f8e90df6fe8d02730b5462697ae52e8b01ad6484497819
            
            command:
              - "/bin/bash"
              - -c
              - |
                envsubst < /tmp/config-template/settings.json > /tmp/settings-resolved.json
                if [ -s /config/settings.json ]
                then
                  cp /tmp/settings-resolved.json /config/settings.json
                  # jq -s '.[0] * .[1]' /config/settings.json /tmp/settings-resolved.json | jq > /config/settings.json
                else
                  cp /tmp/settings-resolved.json /config/settings.json
                fi
                exit 0
            
            envFrom:
              - secretRef:
                  name: overseerr-secret
              - secretRef:
                  name: starr-apps-secret
              - secretRef:
                  name: plex-secret
            
            env:
              - name: ORGANIZATION
                value: ${ORGANIZATION}
              - name: EXTERNAL_DOMAIN
                value: ${EXTERNAL_DOMAIN}

    service:
      main:
        ports:
          http:
            port: *port
      # metrics:
      #   controller: exporter
      #   ports:
      #     metrics:
      #       port: *metricsPort

    ingress:
      main:
        enabled: true
        className: external-nginx
        annotations:
          cert-manager.io/cluster-issuer: letsencrypt-prod
          theme.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:eye-circle-outline"
          external-dns.alpha.kubernetes.io/target: ingress-ext.dmfrey.com
        hosts:
          - host: &host "request.${EXTERNAL_DOMAIN}"
            paths:
              - path: /
                service:
                  name: main
                  port: http
        tls:
          - hosts:
              - *host
            secretName: overseerr-tls-external

    persistence:
      config:
        enabled: true
        type: persistentVolumeClaim
        accessMode: ReadWriteOnce
        size: 1Gi
        storageClass: ceph-block
        advancedMounts:
          main:
            main:
              - path: /app/config
            exporter:
              - path: /config
                readOnly: true
            config-setup:
              - path: /config
                readOnly: false

      config-template:
        enabled: true
        type: configMap
        name: overseerr-config-template
        globalMounts:
          - path: /tmp/config-template
            readOnly: true

    serviceMonitor:
      metrics:
        enabled: true
        serviceName: overseerr-metrics
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 15m
            scrapeTimeout: 2m
