---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app radarr

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          *app :
            image:
              repository: ghcr.io/onedr0p/radarr
              tag: 5.19.3.9730@sha256:7218cd42b646bb773a2c683b95860c51103c3ca7e0b9171b4bc549b95ddc6896

            env:
              TZ: ${TIMEZONE}
              RADARR__INSTANCE_NAME: *app
              RADARR__PORT: &port 7878
              RADARR__APPLICATION_URL: https://radarr.${SECRET_DOMAIN}
              RADARR__LOG_LEVEL: info
              RADARR__API_KEY:
                valueFrom:
                  secretKeyRef:
                    name: starr-apps-secret
                    key: RADARR_API_KEY

            ports:
              - name: http
                containerPort: *port

            resources:
              requests:
                memory: 1024Mi
                cpu: 5m
              limits:
                memory: 2048Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

          exporter:
            image:
              repository: ghcr.io/onedr0p/exportarr
              tag: v2.0.1

            args:
              - *app
              - --enable-additional-metrics

            env:
              URL: "http://localhost:7878"
              PORT: &metricsPort 9708
              APIKEY:
                valueFrom:
                  secretKeyRef:
                    name: starr-apps-secret
                    key: RADARR_API_KEY

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      *app :
        controller: *app
        # type: LoadBalancer
        # annotations:
        #   external-dns.alpha.kubernetes.io/hostname: &host radarr.${SECRET_DOMAIN}
        #   lbipam.cilium.io/ips: 192.168.31.231
        ports:
          http:
            port: *port
            primary: true
          metrics:
            port: *metricsPort

    ingress:
      internal:
        enabled: true
        className: internal
        annotations:
          theme.home.arpa/enabled: "true"

          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:movie-open-outline"

          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Radarr
          gethomepage.dev/icon: radarr.png
          gethomepage.dev/description: Movie Downloads
          gethomepage.dev/widget.type: radarr
          gethomepage.dev/widget.url: http://radarr.media.svc.cluster.local:7878
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_RADARR_TOKEN}}` }}"

          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - host: radarr.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: *app
                  port: http

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}
        globalMounts:
          - path: /config

      media:
        enabled: true
        existingClaim: nfs-media

      backups:
        enabled: true
        type: nfs
        server: "${QNAP_ADDR}"
        path: /plexbackups/backups/radarr
        advancedMounts:
          *app :
            *app :
              - path: /config/Backups

      tmp:
        type: emptyDir
        medium: Memory
        advancedMounts:
          *app :
            *app :
              - path: /tmp

    serviceMonitor:
      metrics:
        enabled: true
        serviceName: *app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 10m
            scrapeTimeout: 10s
