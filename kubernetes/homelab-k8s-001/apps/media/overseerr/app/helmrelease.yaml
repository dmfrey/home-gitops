---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app overseerr

spec:

  interval: 15m

  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          config-setup:
            image:
              repository: ghcr.io/dmfrey/bash
              tag: 5.2.26-alpine3.20

            command:
              - "/usr/local/bin/bash"
              - -c
              - |
                envsubst < /tmp/config-template/settings.json > /tmp/settings-resolved.json
                if [ -s /config/settings.json ]
                then
                  cp /tmp/settings-resolved.json /config/settings.json
                  # jq -s '.[0] * .[1]' /config/settings.json /tmp/settings-resolved.json | jq > /config/settings.json
                else
                  cp /tmp/settings-resolved.json /config/settings.json
                fi
                exit 0

            envFrom:
              - secretRef:
                  name: overseerr-secret
              - secretRef:
                  name: starr-apps-secret
              - secretRef:
                  name: plex-secret

            env:
              - name: ORGANIZATION
                value: ${ORGANIZATION}
              - name: EXTERNAL_DOMAIN
                value: ${SECRET_DOMAIN}

        containers:
          *app :
            image:
              repository: ghcr.io/sct/overseerr
              tag: 1.33.2

            env:
              LOG_LEVEL: "info"
              PORT: &port 5055

            ports:
              - name: http
                containerPort: *port

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: &path /api/v1/status
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false

            resources:
              requests:
                memory: 350Mi
                cpu: 5m
              limits:
                memory: 431Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

          exporter:
            image:
              repository: ghcr.io/willfantom/overseerr-exporter
              tag: 1.2.1

            args:
              - --overseerr.address
              - "http://localhost:5055"
              - --overseerr.api-key
              - "$(OVERSEERR_API_KEY)"

            envFrom:
              - secretRef:
                  name: overseerr-secret

            ports:
              - name: metrics
                containerPort: &metricsPort 9850

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      *app :
        controller: *app
        ports:
          http:
            port: *port
            primary: true
          metrics:
            port: *metricsPort

    ingress:
      external:
        className: external
        annotations:
          theme.home.arpa/enabled: "true"

          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:eye-circle-outline"

          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Video
          gethomepage.dev/name: Overseerr
          gethomepage.dev/icon: overseerr.png
          gethomepage.dev/description: Media Request Management
          gethomepage.dev/widget.type: overseerr
          gethomepage.dev/widget.url: http://overseerr.media.svc.cluster.local:5055
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_OVERSEERR_TOKEN}}` }}"

          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        hosts:
          - host: request.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: *app
                  port: http

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}
        advancedMounts:
          *app :
            *app :
              - path: /app/config
            config-setup:
              - path: /config
                readOnly: false

      config-template:
        enabled: true
        type: configMap
        name: overseerr-config-template
        globalMounts:
          - path: /tmp/config-template
            readOnly: true

      tmp:
        type: emptyDir
        advancedMounts:
          *app :
            *app :
              - path: /tmp

    serviceMonitor:
      metrics:
        serviceName: *app
        endpoints:
          - port: metrics
            scheme: http
            path: /metrics
            interval: 10m
            scrapeTimeout: 10s
