---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app jellyfin

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: app-template

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  driftDetection:
    mode: enabled

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        containers:

          *app :

            image:
              repository: jellyfin/jellyfin
              tag: 10.10.7@sha256:7ae36aab93ef9b6aaff02b37f8bb23df84bb2d7a3f6054ec8fc466072a648ce2
              pullPolicy: IfNotPresent

            env:
              TZ: America/New_York
              PUID: 1000
              PGID: 1000
              DOTNET_SYSTEM_IO_DISABLEFILELOCKING: "true"
              JELLYFIN_FFmpeg__probesize: 50000000
              JELLYFIN_FFmpeg__analyzeduration: 50000000
              JELLYFIN_PublishedServerUrl: https://jellyfin.dmfrey.com

            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: 8096
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false

            resources:
              requests:
                # amd.com/gpu: 1
                cpu: 1
                memory: 4Gi
              limits:
                # amd.com/gpu: 1
                memory: 8Gi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 109, 568, 1568, 65534]
        seccompProfile: { type: RuntimeDefault }
      # affinity:
      #   podAntiAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       - labelSelector:
      #           matchExpressions:
      #             - key: app.kubernetes.io/name
      #               operator: In
      #               values: ["ollama"]
      #             - key: app.kuberentes.io/component
      #               operator: In
      #               values: ["backend"]
      #         topologyKey: kubernetes.io/hostname
      # nodeSelector:
      #   feature.node.kubernetes.io/pci-0300_1002.present: "true"

    service:
      *app :
        controller: *app
        ports:
          http:
            port: &port 8096

    route:
      *app :
        hostnames: ["{{ .Release.Name }}.dmfrey.com"]
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Video
          gethomepage.dev/name: Jellyfin
          gethomepage.dev/icon: jellyfin.png
          gethomepage.dev/description: Media Player
          gethomepage.dev/widget.type: jellyfin
          gethomepage.dev/widget.url: http://jellyfin.media.svc.cluster.local:8096
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_JELLYFIN_TOKEN}}` }}"
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}

      # Separate PVC for cache to avoid backing up cache files
      cache:
        existingClaim: jellyfin-cache
        globalMounts:
          - path: /cache
            readOnly: false

      logs:
        type: emptyDir
        globalMounts:
          - path: /config/log

      media:
        type: nfs
        server: 192.168.30.5
        path: /media

      transcode:
        enabled: true
        type: custom
        volumeSpec:
          ephemeral:
            volumeClaimTemplate:
              spec:
                storageClassName: ceph-block
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 500Gi
        globalMounts:
          - path: /config/transcodes
            readOnly: false

      tmp:
        type: emptyDir
        sizeLimit: 10Gi
