---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app jellyfin

spec:

  interval: 15m

  chart:
    spec:
      chart: app-template
      version: 3.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        containers:

          *app :

            image:
              repository: jellyfin/jellyfin
              tag: 10.10.1@sha256:12b7aa2c8086e5566badc35370fab41b8cc8774dc3a80b07a1d6eb14f282b816
              pullPolicy: IfNotPresent

            env:
              TZ: ${TIMEZONE}
              PUID: 568
              PGID: 568
              DOTNET_SYSTEM_IO_DISABLEFILELOCKING: "true"
              JELLYFIN_FFmpeg__probesize: 50000000
              JELLYFIN_FFmpeg__analyzeduration: 50000000
              JELLYFIN_PublishedServerUrl: https://jellyfin.${SECRET_DOMAIN}

            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: 8096
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: false

            resources:
              requests:
                amd.com/gpu: 1
                cpu: 1
                memory: 4Gi
              limits:
                amd.com/gpu: 1
                memory: 8Gi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 109, 1568, 65534]
        seccompProfile: { type: RuntimeDefault }
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values: ["ollama"]
                  - key: app.kuberentes.io/component
                    operator: In
                    values: ["backend"]
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        feature.node.kubernetes.io/pci-0300_1002.present: "true"

    service:
      *app :
        controller: *app
        # type: LoadBalancer
        # externalTrafficPolicy: Cluster
        # annotations:
        #   external-dns.alpha.kubernetes.io/hostname: &host jellyfin.${SECRET_DOMAIN}
        #   lbipam.cilium.io/ips: ${SVC_JELLYFIN_ADDR}
        ports:
          http:
            port: &port 8096

    ingress:
      internal:
        enabled: false
        className: internal
        annotations:
          theme.home.arpa/enabled: "true"
          hajimari.io/enable: "true"
          hajimari.io/icon: simple-icons:jellyfin
          hajimari.io/url: "https://jellyfin.${SECRET_DOMAIN}/web/index.html"
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - host: jellyfin.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: *app
                  port: http

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}

      # Separate PVC for cache to avoid backing up cache files
      cache:
        existingClaim: jellyfin-cache
        globalMounts:
          - path: /cache
            readOnly: false

      logs:
        type: emptyDir
        globalMounts:
          - path: /config/log

      media:
        existingClaim: nfs-media

      transcode:
        enabled: true
        type: custom
        volumeSpec:
          ephemeral:
            volumeClaimTemplate:
              spec:
                storageClassName: ceph-block
                accessModes:
                  - ReadWriteOnce
                resources:
                  requests:
                    storage: 500Gi
        globalMounts:
          - path: /config/transcodes
            readOnly: false

      tmp:
        type: emptyDir
        sizeLimit: 10Gi
