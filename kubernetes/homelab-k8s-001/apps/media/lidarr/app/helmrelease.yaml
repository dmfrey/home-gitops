---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app lidarr

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: lidarr

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: -1

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  driftDetection:
    mode: enabled

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          fix-permissions:
            image:
              repository: busybox
              tag: stable

            command: ["sh", "-c", "chown -R 1000:1000 /config/*"]

            securityContext:
              runAsNonRoot: false
              readOnlyRootFilesystem: true
              allowPrivilegeEscalation: true
              runAsUser: 0
              runAsGroup: 0
              capabilities: { add: ["CHOWN", "FOWNER", "DAC_OVERRIDE"], drop: ["ALL"] }

        containers:
          *app :
            image:
              repository: ghcr.io/home-operations/lidarr
              tag: 3.0.0

            env:
              TZ: America/New_York
              LIDARR__INSTANCE_NAME: *app
              LIDARR__PORT: &port 8686
              LIDARR__LOG_LEVEL: debug
              LIDARR__ANALYTICS_ENABLED: "False"
              LIDARR__APPLICATION_URL: "https://lidarr.dmfrey.com"
              LIDARR__API_KEY:
                valueFrom:
                  secretKeyRef:
                    name: lidarr-secret
                    key: LIDARR_API_KEY

            ports:
              - name: http
                containerPort: *port

            resources:
              requests:
                cpu: 150m
                memory: 512Mi
              limits:
                memory: 1024Mi

            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

          # sidecars:
          # exporter:
          #   dependsOn: *app

          #   image:
          #     repository: ghcr.io/onedr0p/exportarr
          #     tag: v2.1.0

          #   args:
          #     - *app
          #     - --enable-additional-metrics

          #   env:
          #     URL: "http://localhost:8686"
          #     CONFIG: "/config/config.xml"
          #     PORT: &metricsPort 9709
          #     APIKEY:
          #       valueFrom:
          #         secretKeyRef:
          #           name: lidarr-secret
          #           key: LIDARR_API_KEY

          #   ports:
          #     - name: metrics
          #       containerPort: *metricsPort

          #   securityContext: *securityContext

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch

    service:
      *app :
        controller: *app
        # type: LoadBalancer
        # annotations:
        #   lbipam.cilium.io/ips: 192.168.30.232 #, ::ffff:192.168.30.232
        ports:
          http:
            port: *port
            primary: true
          # metrics:
          #   port: *metricsPort

    route:
      *app :
        hostnames: ["{{ .Release.Name }}.dmfrey.com"]
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Lidarr
          gethomepage.dev/icon: lidarr.png
          gethomepage.dev/description: Music Downloads
          gethomepage.dev/widget.type: lidarr
          gethomepage.dev/widget.url: http://lidarr.media.svc.cluster.local:8686
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_LIDARR_TOKEN}}` }}"
        parentRefs:
          - name: envoy-internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    persistence:
      config:
        existingClaim: ${VOLSYNC_CLAIM}

      media:
        type: nfs
        server: nas.internal
        path: /media/

      backups:
        enabled: true
        type: nfs
        server: nas.internal
        path: /plexbackups/backups/lidarr
        advancedMounts:
          *app :
            *app :
              - path: /config/Backups
                readOnly: false

      tmp:
        type: emptyDir
        medium: Memory
        advancedMounts:
          *app :
            *app :
              - path: /tmp

    # serviceMonitor:
    #   metrics:
    #     enabled: true
    #     serviceName: *app
    #     endpoints:
    #       - port: metrics
    #         scheme: http
    #         path: /metrics
    #         interval: 10m
    #         scrapeTimeout: 10s
