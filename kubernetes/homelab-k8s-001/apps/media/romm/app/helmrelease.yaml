---
# yaml-language-server: $schema=https://kubernetes-schemas-5e0.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app romm

spec:

  interval: 15m

  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  values:

    controllers:

      *app :
        type: statefulset

        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          *app :
            image:
              repository: rommapp/romm
              tag: 3.7.3

            env:
              TZ: ${TIMEZONE}
              ENABLE_SCHEDULED_RESCAN: "true"
              SCHEDULED_RESCAN_CRON: "0 3 * * *"
              ENABLE_SCHEDULED_UPDATE_SWITCH_TITLEDB: "false"
              ENABLE_SCHEDULED_UPDATE_MAME_XML: "false"
              ENABLE_RESCAN_ON_FILESYSTEM_CHANGE: "true"
              RESCAN_ON_FILESYSTEM_CHANGE_DELAY: 5
              ROMM_DB_DRIVER: postgresql
              DB_HOST:
                valueFrom:
                  secretKeyRef:
                    name: pg-romm-app
                    key: host
              DB_PORT:
                valueFrom:
                  secretKeyRef:
                    name: pg-romm-app
                    key: port
              DB_NAME:
                valueFrom:
                  secretKeyRef:
                    name: pg-romm-app
                    key: dbname
              DB_USER:
                valueFrom:
                  secretKeyRef:
                    name: pg-romm-app
                    key: username
              DB_PASSWD:
                valueFrom:
                  secretKeyRef:
                    name: pg-romm-app
                    key: password
              REDIS_HOST: romm-kv-cluster.media.svc.cluster.local
              REDIS_PORT: 6379
              OIDC_ENABLED: true
              OIDC_PROVIDER: authentik
              OIDC_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: romm-secret
                    key: ROMM_CLIENT_ID
              OIDC_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: romm-secret
                    key: ROMM_CLIENT_SECRET
              OIDC_REDIRECT_URI: http://romm.${SECRET_DOMAIN}/api/oauth/openid
              OIDC_SERVER_APPLICATION_URL: http://auth.${SECRET_DOMAIN}/application/o/romm

            envFrom:
              - secretRef:
                  name: romm-secret

            ports:
              - name: http
                containerPort: &port 8080

            resources:
              requests:
                memory: 350Mi
                cpu: 100m
              limits:
                memory: 1024Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities:
                drop:
                  - ALL

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }
        supplementalGroups:
          - 1568

    service:
      *app :
        controller: *app
        ports:
          http:
            port: *port

    ingress:
      external:
        enabled: true
        className: external
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:television-classic"

          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Games
          gethomepage.dev/name: RomM
          gethomepage.dev/icon: romm.png
          gethomepage.dev/description: Retro Games
          gethomepage.dev/widget.type: romm
          gethomepage.dev/widget.url: http://romm.media.svc.cluster.local:8080

          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          nginx.ingress.kubernetes.io/enable-cors: "true"
          nginx.org/websocket-services: romm
        hosts:
          - host: romm.${SECRET_DOMAIN}
            paths:
              - path: /
                service:
                  identifier: *app
                  port: http

    persistence:
      romm-data:
        existingClaim: ${VOLSYNC_CLAIM}
        globalMounts:
          - path: /romm
            readOnly: false

      romm-config:
        type: emptyDir
        globalMounts:
          - path: /romm/config

      configuration:
        type: configMap
        name: romm-config
        globalMounts:
          - path: /romm/config/config.yml
            subPath: config.yml
        defaultMode: 0664

      romm-assets:
        enabled: true
        type: nfs
        server: ${QNAP_ADDR}
        path: /games/assets
        globalMounts:
          - path: /romm/assets

      romm-library:
        enabled: true
        type: nfs
        server: ${QNAP_ADDR}
        path: /games/library
        globalMounts:
          - path: /romm/library

      romm-resources:
        enabled: true
        type: nfs
        server: ${QNAP_ADDR}
        path: /games/resources
        globalMounts:
          - path: /romm/resources

      tmp:
        type: emptyDir
        medium: Memory
