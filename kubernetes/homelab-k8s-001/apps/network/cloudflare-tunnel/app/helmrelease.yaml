---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: cloudflare-tunnel
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 4.3.0
  url: oci://ghcr.io/bjw-s-labs/helm/app-template
---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app cloudflare-tunnel

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: cloudflare-tunnel

  install:
    remediation:
      retries: -1

  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:

    controllers:
      *app :
        replicas: 2
        strategy: RollingUpdate

        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          *app :
            image:
              repository: docker.io/cloudflare/cloudflared
              tag: 2025.9.1@sha256:4604b477520dc8322af5427da68b44f0bf814938e9d2e4814f2249ee4b03ffdf

            env:
              NO_AUTOUPDATE: true
              TUNNEL_METRICS: 0.0.0.0:8080
              TUNNEL_ORIGIN_ENABLE_HTTP2: true
              TUNNEL_POST_QUANTUM: true
              TUNNEL_TRANSPORT_PROTOCOL: quic

            envFrom:
              - secretRef:
                  name: cloudflare-tunnel-secret

            args:
              - tunnel
              - run

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /ready
                    port: &port 8080
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 256Mi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000

    service:
      *app :
        controller: *app
        ports:
          http:
            port: *port

    serviceMonitor:
      metrics:
        serviceName: *app
        endpoints:
          - port: http

    configMaps:
      config:
        data:
          config.yaml: |-
            ingress:
              - hostname: dmfrey.com
                originRequest:
                  originServerName: dmfrey.com
                service: https://envoy-external.{{ .Release.Namespace }}.svc.cluster.local:443
              - hostname: "*.dmfrey.com"
                originRequest:
                  originServerName: external.dmfrey.com
                service: https://envoy-external.{{ .Release.Namespace }}.svc.cluster.local:443
              - service: http_status:404

    persistence:

      config:
        type: configMap
        identifier: config
        globalMounts:
          - path: /etc/cloudflared/config.yaml
            subPath: config.yaml
