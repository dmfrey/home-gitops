---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app hedgedoc

spec:

  interval: 30m

  chart:
    spec:
      chart: app-template
      version: 3.7.2
      interval: 15m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  maxHistory: 2

  install:
    createNamespace: true
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3

  uninstall:
    keepHistory: false

  values:

    controllers:

      *app :
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          backend:
            image:
              repository: ghcr.io/hedgedoc/hedgedoc/backend
              pullPolicy: IfNotPresent
              tag: 2.0.0-alpha.3

            env:
              TZ: ${TIMEZONE}
              HD_BASE_URL: https://kb.${SECRET_DOMAIN}
              HD_SESSION_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: hedgedoc-secret
                    key: HD_SESSION_SECRET

              # Database settings
              HD_DATABASE_TYPE: postgres
              HD_DATABASE_HOST:
                valueFrom:
                  secretKeyRef:
                    name: pg-hedgedoc-app
                    key: host
              HD_DATABASE_PORT:
                valueFrom:
                  secretKeyRef:
                    name: pg-hedgedoc-app
                    key: port
              HD_DATABASE_NAME:
                valueFrom:
                  secretKeyRef:
                    name: pg-hedgedoc-app
                    key: dbname
              HD_DATABASE_USER:
                valueFrom:
                  secretKeyRef:
                    name: pg-hedgedoc-app
                    key: user
              HD_DATABASE_PASS:
                valueFrom:
                  secretKeyRef:
                    name: pg-hedgedoc-app
                    key: password

              # Uploads
              HD_MEDIA_BACKEND: filesystem
              HD_MEDIA_BACKEND_FILESYSTEM_UPLOAD_PATH: uploads/

              # Auth
              # HD_AUTH_LOCAL_ENABLE_LOGIN: true
              # HD_AUTH_LOCAL_ENABLE_REGISTER: true
              HD_AUTH_OIDC_SERVERS: authentik
              HD_AUTH_OIDC_AUTHENTIK_PROVIDER_NAME: Authentik
              HD_AUTH_OIDC_AUTHENTIK_ISSUER: https://auth.${SECRET_DOMAIN}/application/o/hedgedoc/.well-known/openid-configuration
              HD_AUTH_OIDC_AUTHENTIK_CLIENT_ID:
                valueFrom:
                  secretKeyRef:
                    name: hedgedoc-secret
                    key: HD_AUTHENTIK_CLIENT_ID
              HD_AUTH_OIDC_AUTHENTIK_CLIENT_SECRET:
                valueFrom:
                  secretKeyRef:
                    name: hedgedoc-secret
                    key: HD_AUTHENTIK_CLIENT_SECRET
              HD_AUTH_OIDC_AUTHENTIK_THEME: google
              HD_AUTH_OIDC_AUTHENTIK_ENABLE_REGISTER: false

            envFrom: []
              # - configMapRef:
              #     name: hedgedoc-ldap-configmap
              # - secretRef:
              #     name: *secret

          frontend:
            image:
              repository: ghcr.io/hedgedoc/hedgedoc/frontend
              pullPolicy: IfNotPresent
              tag: 2.0.0-alpha.3

            env:
              HD_BASE_URL: "https://kb.${SECRET_DOMAIN}"
              HD_INTERNAL_API_URL: http://hedgedoc.self-hosted.svc.cluster.local:3000

    service:
      *app :
        controller: *app
        ports:
          backend:
            port: 3000
          http:
            port: 3001

    ingress:
      external:
        className: external
        annotations:
          nginx.org/websocket-services: *app

          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:hedgedoc"
          hajimari.io/appName: "Hedgedoc"

          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN}"
        hosts:
          - host: &host "kb.${SECRET_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: *app
                  port: http

    # persistence:
    #   config:
    #     existingClaim: ${VOLSYNC_CLAIM}
