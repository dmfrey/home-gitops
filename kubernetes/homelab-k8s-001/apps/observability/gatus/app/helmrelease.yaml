---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: gatus
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 4.3.0
  url: oci://ghcr.io/bjw-s-labs/helm/app-template
---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app gatus

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: gatus

  install:
    remediation:
      retries: -1

  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  values:

    controllers:
      *app :
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:

          gatus-sidecar:
            image:
              repository: ghcr.io/home-operations/gatus-sidecar
              tag: 0.0.8@sha256:79c4622f9b379d6bb4e81d775dc4290ddab65eb2d1e4fa4d37a3e7aeef1975d5

            args:
              - --auto-httproute
              - --enable-httproute
              - --enable-service

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 64Mi

            restartPolicy: Always

          # init-config:

          #   image:
          #     repository: ghcr.io/kiwigrid/k8s-sidecar
          #     tag: 1.30.10@sha256:835d79d8fbae62e42d8a86929d4e3c5eec2e869255dd37756b5a3166c2f22309

          #   env:
          #     FOLDER: /config
          #     LABEL: gatus.io/enabled
          #     NAMESPACE: ALL
          #     RESOURCE: both
          #     UNIQUE_FILENAMES: true
          #     METHOD: WATCH

          #   restartPolicy: Always

          #   resources:
          #     requests:
          #       cpu: 10m
          #     limits:
          #       memory: 128Mi

        containers:

          *app :

            image:
              repository: ghcr.io/twin/gatus
              tag: v5.26.0@sha256:3c0314bd1b1e9d7c34d8f2efee16b380770a9639ec5386cc305e8df104e097dc

            env:
              GATUS_CONFIG_PATH: /config
              GATUS_DELAY_START_SECONDS: 5
              GATUS_WEB_PORT: &port 8080
              TZ: America/New_York
              POSTGRES_URI:
                secretKeyRef:
                  name: pg-gatus-app
                  key: uri

            envFrom:
              - secretRef:
                  name: gatus-secret

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

            resources:
              requests:
                cpu: 100m
              limits:
                memory: 256Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

        serviceAccount:
          name: *app

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

    service:
      app:
        ports:
          http:
            port: *port

    serviceMonitor:
      app:
        endpoints:
          - port: http

    route:
      app:
        annotations:
          gatus.home-operations.com/endpoint: |-
            conditions: ["[STATUS] == 200"]
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Observability
          gethomepage.dev/name: Gatus
          gethomepage.dev/icon: gatus.png
          gethomepage.dev/description: Application Status
          gethomepage.dev/widget.type: gatus
          gethomepage.dev/widget.url: http://gatus.observability.svc.cluster.local:8080
        hostnames:
          - "{{ .Release.Name }}.dmfrey.com"
          - status.dmfrey.com
        parentRefs:
          - name: envoy-external
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    rbac:
      roles:
        gatus:
          type: ClusterRole
          rules:
            - apiGroups:
                - ""
              resources:
                - services
              verbs:
                - get
                - watch
                - list
            - apiGroups:
                - gateway.networking.k8s.io
              resources:
                - gateways
                - httproutes
              verbs:
                - get
                - watch
                - list

      bindings:
        gatus:
          type: ClusterRoleBinding
          roleRef:
            identifier: gatus
          subjects:
            - identifier: gatus

    persistence:
      config:
        type: emptyDir

      config-file:
        type: configMap
        name: "{{ .Release.Name }}-configmap"
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true

    serviceAccount:
      gatus: {}
