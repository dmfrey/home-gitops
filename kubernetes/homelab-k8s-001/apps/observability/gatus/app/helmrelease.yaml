# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app gatus

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: app-template
    namespace: flux-system

  install:
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  dependsOn:
    - name: rook-ceph-cluster
      namespace: storage

  values:

    controllers:
      *app :
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:

          init-config:

            image:
              repository: ghcr.io/kiwigrid/k8s-sidecar
              tag: 1.30.2@sha256:cdb361e67b1b5c4945b6e943fbf5909badaaeb51595eaf75fb7493b3abbbe10f

            env:
              FOLDER: /config
              LABEL: gatus.io/enabled
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: WATCH

            restartPolicy: Always

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 128Mi

        containers:

          *app :

            image:
              repository: ghcr.io/twin/gatus
              tag: v5.16.0@sha256:bb738c87cf2e2a08b8fff180cfc433e7b8b87bb1779c1fb1b00f8b748673e3c3

            env:
              - name: TZ
                value: ${TIMEZONE}
              - name: BASE_URL
                value: https://status.${SECRET_DOMAIN}
              - name: GATUS_CONFIG_PATH
                value: /config
              - name: GATUS_DELAY_START_SECONDS
                value: 5
              - name: POSTGRES_URI
                secretKeyRef:
                  name: pg-gatus-app
                  key: uri

            envFrom:
              - secretRef:
                  name: gatus-secret

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: &port 8080
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes

            resources:
              requests:
                cpu: 10m
              limits:
                memory: 256Mi

            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: OnRootMismatch
        seccompProfile: { type: RuntimeDefault }

      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
              topologyKey: kubernetes.io/hostname

    service:
      *app :
        controller: *app
        ports:
          http:
            port: *port

    ingress:
      external:
        enabled: true
        className: external
        annotations:
          hajimari.io/enable: "true"
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
        hosts:
          - host: status.${SECRET_DOMAIN}
            paths:
            - path: /
              service:
                identifier: *app
                port: http

    serviceAccount:
      create: true
      name: *app

    persistence:
      config:
        type: emptyDir

      config-file:
        type: configMap
        name: gatus-configmap
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true

    serviceMonitor:
      metrics:
        serviceName: *app
        endpoints:
          - port: http
            scheme: http
            path: /metrics
            interval: 1m
            scrapeTimeout: 10s
            metricRelabelings:
              - action: labeldrop
                regex: (pod)
              - action: replace
                sourceLabels: ["service"]
                targetLabel: instance

