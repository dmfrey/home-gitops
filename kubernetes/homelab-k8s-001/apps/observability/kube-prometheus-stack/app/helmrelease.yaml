---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/source.toolkit.fluxcd.io/ocirepository_v1.json
apiVersion: source.toolkit.fluxcd.io/v1
kind: OCIRepository
metadata:
  name: kube-prometheus-stack
spec:
  interval: 5m
  layerSelector:
    mediaType: application/vnd.cncf.helm.chart.content.v1.tar+gzip
    operation: copy
  ref:
    tag: 77.10.0
  url: oci://ghcr.io/prometheus-community/charts/kube-prometheus-stack
---
# yaml-language-server: $schema=https://kubernetes-schemas.dmfrey.com/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack

spec:

  interval: 1h

  chartRef:
    kind: OCIRepository
    name: kube-prometheus-stack
    namespace: observability

  install:
    remediation:
      retries: -1

  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3

  # valuesFrom:
  # - kind: ConfigMap
  #   name: flux-kube-state-metrics-config
  #   valuesKey: kube-state-metrics-config.yaml

  driftDetection:
    mode: enabled

  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  values:

    crds:
      enabled: true
      upgradeJob:
        enabled: true
        forceConflicts: true

    cleanPrometheusOperatorObjectNames: true

    alertmanager:

      route:
        main:
          enabled: true
          hostnames:
            - alertmanager.dmfrey.com
          annotations:
            gethomepage.dev/enabled: "true"
            gethomepage.dev/group: Observability
            gethomepage.dev/name: Alert Manager
            gethomepage.dev/icon: alertmanager.png
            gethomepage.dev/description: Application & System Alerts
          parentRefs:
            - name: internal
              namespace: kube-system
              sectionName: https

      alertmanagerSpec:
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m

        externalUrl: https://alertmanager.dmfrey.com

        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi

    kubeEtcd:
      service:
        selector:
          k8s-app: kube-apiserver # etcd runs on control plane nodes

    kubeProxy:
      enabled: false

    prometheus:
      route:
        main:
          enabled: true
          hostnames:
            - prometheus.dmfrey.com
          annotations:
            gethomepage.dev/enabled: "true"
            gethomepage.dev/group: Observability
            gethomepage.dev/name: Prometheus
            gethomepage.dev/icon: prometheus.png
            gethomepage.dev/description: Application & System Metrics
            gethomepage.dev/widget.type: prometheus
            gethomepage.dev/widget.url: http://prometheus-operated.observability.svc.cluster.local:9090
          parentRefs:
            - name: internal
              namespace: kube-system
              sectionName: https

      prometheusSpec:

        # externalLabels:
        #   cluster: homelab-k8s-001

        image:
          registry: docker.io
          repository: prompp/prompp
          tag: 2.53.2-0.4.0
        securityContext:
          runAsNonRoot: true
          runAsUser: 64535
          runAsGroup: 64535
          fsGroup: 64535

        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false

        externalUrl: https://prometheus.dmfrey.com

        # podMonitorSelectorNilUsesHelmValues: false
        # probeSelectorNilUsesHelmValues: false
        # ruleSelectorNilUsesHelmValues: false
        # scrapeConfigSelectorNilUsesHelmValues: false
        # serviceMonitorSelectorNilUsesHelmValues: false
        # enableAdminAPI: true
        # walCompression: true
        # enableFeatures:
        #   - memory-snapshot-on-shutdown
        retention: 14d
        retentionSize: 50GB

        # replicas: 2
        # replicaExternalLabelName: "__replica__" # must match with thanos value `.query.replicaLabel[0]`

        resources:
          requests:
            cpu: 100m
          limits:
            memory: 4Gi

        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 50Gi

    prometheus-node-exporter:
      fullnameOverride: node-exporter

      prometheus: &prometheus
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node

    kube-state-metrics:
      fullnameOverride: kube-state-metrics

      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]

      prometheus:
        <<: *prometheus

    grafana:
      enabled: false
      forceDeployDashboards: true

    # additionalPrometheusRulesMap:
    #   dockerhub-rules:
    #     groups:
    #       - name: dockerhub
    #         rules:
    #           - alert: DockerhubRateLimitRisk
    #             annotations:
    #               summary: Kubernetes cluster Dockerhub rate limit risk
    #             expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
    #             labels:
    #               severity: critical

    #   oom-rules:
    #     groups:
    #       - name: oom
    #         rules:
    #           - alert: OomKilled
    #             annotations:
    #               summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
    #             expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
    #             labels:
    #               severity: critical

    #   zfs-rules:
    #     groups:
    #       - name: zfs
    #         rules:
    #           - alert: ZfsUnexpectedPoolState
    #             annotations:
    #               summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
    #             expr: node_zfs_zpool_state{state!="online"} > 0
    #             labels:
    #               severity: critical
