---
# yaml-language-server: $schema=https://kubernetes-schemas-5e0.pages.dev/helm.toolkit.fluxcd.io/helmrelease_v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack

spec:

  interval: 30m

  chart:
    spec:
      chart: kube-prometheus-stack
      version: 69.3.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system

  install:
    # crds: Create
    remediation:
      retries: 3

  upgrade:
    cleanupOnFail: true
    # crds: CreateReplace
    remediation:
      strategy: rollback
      retries: 3

  dependsOn:
    - name: rook-ceph-cluster
      namespace: storage

  valuesFrom:
  - kind: ConfigMap
    name: flux-kube-state-metrics-config
    valuesKey: kube-state-metrics-config.yaml

  # driftDetection:
  #   mode: enabled

  # https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
  values:

    crds:
      enabled: false

    cleanPrometheusOperatorObjectNames: true

    alertmanager:
      enabled: true

      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "mdi:alpha-t-box"
          hajimari.io/appName: "Alert Manager"

          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts: ["alertmanager.${SECRET_DOMAIN}"]
        pathType: Prefix

      alertmanagerSpec:
        alertmanagerConfiguration:
          name: alertmanager
          global:
            resolveTimeout: 5m

        externalUrl: https://alertmanager.${SECRET_DOMAIN}

        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists

        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 1Gi

    kubeApiServer:
      serviceMonitor:
        selector:
          # matchLabels:
          k8s-app: kube-apiserver

    kubeScheduler:
      service:
        selector:
          # matchLabels:
          k8s-app: kube-scheduler

    kubeControllerManager: &kubeControllerManager
      service:
        selector:
          # matchLabels:
          k8s-app: kube-controller-manager

    kubeEtcd:
      <<: *kubeControllerManager # etcd runs on control plane nodes

    kubeProxy:
      enabled: false

    prometheus:
      ingress:
        enabled: true
        ingressClassName: internal
        annotations:
          hajimari.io/enable: "true"
          hajimari.io/icon: "simple-icons:prometheus"
          hajimari.io/appName: "Prometheus"

          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        pathType: Prefix
        hosts:
          - prometheus.${SECRET_DOMAIN}

      prometheusSpec:

        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: node-role.kubernetes.io/control-plane
                  operator: Exists

        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        ruleSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - memory-snapshot-on-shutdown
        retention: 14d
        retentionSize: 50GB

        replicas: 1   # 3
        shards: 1     # 2

        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2000Mi

        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: ceph-block
              resources:
                requests:
                  storage: 50Gi

        # thanos:
        #   image: quay.io/thanos/thanos:v0.37.2@sha256:4ec6df40fdb921de162677b321057caa8fb8324c65f4cfae9568ed55c4469e2c
        #   objectStorageConfig:
        #     name: thanos-secret
        #     key: objstore.yml
        #   # renovate: datasource=docker depName=quay.io/thanos/thanos
        #   version: "v0.37.2"

      # thanosService:
      #   enabled: true

      # thanosServiceMonitor:
      #   enabled: true

    prometheus-node-exporter:
      fullnameOverride: node-exporter

      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node

    kube-state-metrics:
      fullnameOverride: kube-state-metrics

      metricLabelsAllowlist:
        - pods=[*]
        - deployments=[*]
        - persistentvolumeclaims=[*]

      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels: ["__meta_kubernetes_pod_node_name"]
              targetLabel: kubernetes_node

    grafana:
      enabled: false
      forceDeployDashboards: true

    additionalPrometheusRulesMap:
      dockerhub-rules:
        groups:
          - name: dockerhub
            rules:
              - alert: DockerhubRateLimitRisk
                annotations:
                  summary: Kubernetes cluster Dockerhub rate limit risk
                expr: count(time() - container_last_seen{image=~"(docker.io).*",container!=""} < 30) > 100
                labels:
                  severity: critical

      oom-rules:
        groups:
          - name: oom
            rules:
              - alert: OomKilled
                annotations:
                  summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
                expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
                labels:
                  severity: critical

      zfs-rules:
        groups:
          - name: zfs
            rules:
              - alert: ZfsUnexpectedPoolState
                annotations:
                  summary: ZFS pool {{$labels.zpool}} on {{$labels.instance}} is in a unexpected state {{$labels.state}}
                expr: node_zfs_zpool_state{state!="online"} > 0
                labels:
                  severity: critical
